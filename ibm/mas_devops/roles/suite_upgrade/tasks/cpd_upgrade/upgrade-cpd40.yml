---
# This role will assume you have CloudPak for Data v3.5 installed in 'cpd-meta-ops' namespace
# and will perform an in-place upgrade to CloudPak for Data v4.0 where the CPD operators will be 
# deployed in 'ibm-common-services' namespace and the services will be deployed in existing 'cpd-meta-ops' namespace 

# 1. Fail if no required keys are provided
# -----------------------------------------------------------------------------
- name: "Fail if cpd_storage_class has not been provided"
  when: cpd_storage_class is not defined or cpd_storage_class == ""
  fail:
    msg: "cpd_storage_class property has not been set"

# - name: "Fail if cpd_block_storage_class has not been provided"
#   when: cpd_block_storage_class is not defined or cpd_block_storage_class == ""
#   fail:
#     msg: "cpd_block_storage_class property has not been set"

- name: "Debug information"
  debug:
    msg:
      - "CPD meta namespace ........... {{ cpd_meta_namespace }}"
      - "CPD services namespace ....... {{ cpd_services_namespace }}"
      - "CPD registry ................. {{ cpd_registry }}"
      - "CPD username ................. {{ cpd_registry_user }}"
      - "CPD storage class ............ {{ cpd_storage_class }}"
      - "CPD block storage class ...... {{ cpd_block_storage_class }}"

# 2. Setup namespace for CP4D
# -----------------------------------------------------------------------------
- name: "Check if ibm-common-services operator is installed already"
  community.kubernetes.k8s_info:
    api_version: apps/v1
    name: ibm-common-service-operator
    namespace: ibm-common-services
    kind: Deployment
  register: _cs_deployment

# - name: "Create CPD 4.0 Namespace"
#   vars:
#     namespace: "{{ cpd_meta_namespace }}"
#   community.kubernetes.k8s:
#     apply: yes
#     definition: "{{ lookup('template', 'templates/cpd40/namespace.yaml') }}"
#   register: _cpd_meta_namespace_result

# 3. Install CP4D operator
# -----------------------------------------------------------------------------
- name: "Apply operator group"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cpd/operatorgroup.yml') }}"
  when: _cs_deployment.resources[0] is not defined

# just need this if foundation services/ibm-common-services not installed yet:
- name: "Install namespace scope subscription"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cpd/namespacescope.yml') }}"
  when: _cs_deployment.resources[0] is not defined

- name: "Wait for namespace scope operator to be ready (60s delay)"
  when: _cs_deployment.resources[0] is not defined
  community.kubernetes.k8s_info:
    api_version: apps/v1
    name: ibm-namespace-scope-operator
    namespace: "{{ cpd_meta_namespace }}"
    kind: Deployment
  register: _ns_subscription
  until: _ns_subscription.resources[0].status.availableReplicas is defined
  retries: 10 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

- name: "Apply namespace scope"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cpd/namespacescope.yml') }}"

- name: "Install CPD 4.0 Subscription"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cpd/subscription-cpd-operator.yml') }}"
  register: _cpd_subscription_result

- name: "Wait for cpd-platform-operator-manager to be ready (60s delay)"
  community.kubernetes.k8s_info:
    api_version: apps/v1
    name: cpd-platform-operator-manager
    namespace: "{{ cpd_meta_namespace }}"
    kind: Deployment
  register: _cpd_subscription
  until: _cpd_subscription.resources[0].status.availableReplicas is defined
  retries: 10 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

- name: "Wait for operand-deployment-lifecycle-manager to be ready (60s delay)"
  community.kubernetes.k8s_info:
    api_version: apps/v1
    name: operand-deployment-lifecycle-manager
    namespace: "{{ cpd_meta_namespace }}"
    kind: Deployment
  register: _operand_subscription
  until: _operand_subscription.resources[0].status.availableReplicas is defined
  retries: 10 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

- name: "Apply CloudPak for Data 4.0 CR"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cpd/ibmcpd.yml') }}"
  register: _cpd_ibmcdp_result

- name: "Wait for ibm-zen-operator to be ready (60s delay)"
  community.kubernetes.k8s_info:
    api_version: apps/v1
    name: ibm-zen-operator
    namespace: "{{ cpd_meta_namespace }}"
    kind: Deployment
  register: _zen_deployment
  until: _zen_deployment.resources[0].status.availableReplicas is defined
  retries: 90 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

- name: "Wait for ibmcpd CR to have status 'Completed'"
  community.kubernetes.k8s_info:
    api_version: cpd.ibm.com/v1
    name: ibmcpd-cr
    namespace: "{{ cpd_services_namespace }}"
    kind: Ibmcpd
  register: _ibmcpd_subscription
  until: _ibmcpd_subscription.resources[0].status.controlPlaneStatus == "Completed"
  retries: 90 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

- name: "Wait for ZenService CR to have status 'Completed'"
  community.kubernetes.k8s_info:
    api_version: zen.cpd.ibm.com/v1
    name: lite-cr
    namespace: "{{ cpd_services_namespace }}"
    kind: ZenService
  register: _zen_subscription
  until:
    - _zen_subscription.resources[0].status is defined 
    - _zen_subscription.resources[0].status.zenStatus == "Completed"
  retries: 90 # Approximately 10 minutes before we give up
  delay: 60 # 1 minute

# 5. Provide CP4D dashboard URL
# -----------------------------------------------------------------------------
- name: "Retrieve admin credentials"
  community.kubernetes.k8s_info:
    api_version: v1
    name: admin-user-details
    namespace: "{{ cpd_services_namespace }}"
    kind: Secret
  register: _cpd_admin

- name: "Obtain CP4D dashboard URL"
  debug:
    msg:
      - "CP4D Dashboard ................. https://{{_zen_subscription.resources[0].status.url}}"
      - "CP4D Username .................. admin"
      - "CP4D Password .................. Found in 'admin-user-details' secret under '{{ cpd_services_namespace }}' namespace"