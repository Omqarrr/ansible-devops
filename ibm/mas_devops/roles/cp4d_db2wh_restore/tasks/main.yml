---
# 1. Provide debug information to the user
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "CPD Namespace .......................... {{ cpd_meta_namespace }}"
      - "DB2 Instance ID ........................ {{ db2wh_instance_id }}"
      - "DB2 Backup Files Directory ............. {{ db2wh_backup_dir }}"
      - "DB2 Backup Temp Log Files Directory .... {{ db2wh_backup_tmp_logs }}" 

- name: "Check backup files in {{ db2wh_backup_folder }} folder"
  find:
    paths: "{{ db2wh_backup_folder }}"
    file_type: "file"
  register: find_result

- set_fact: 
    db_filenames: "{{ db_filenames }} + [ '{{ item | basename }}' ]"
  with_items: "{{ full_path }}"
  vars:
    db_filenames: []
    full_path: "{{ find_result.files | map(attribute='path') | list }}"

- name: Get Backup file timestamp
  vars:
    regex: '\d+\d+\d+\d'
  when: item is regex('^BLUDB.*')
  set_fact:
    db_backup_restore_timestamp: "{{ item | regex_search(regex) }}"
  loop: "{{ db_filenames }}"
    #regex to extract the timestamp> '([0-9])\w+\1.\1...'

- debug: 
    msg: "DB Backup Timestamp is: {{ db_backup_restore_timestamp }}"

# 3. Determine which pod to run in
# -----------------------------------------------------------------------------
- name: "Lookup db2 Pod"
  community.kubernetes.k8s_info:
    kind: Pod
    namespace: "{{ cpd_meta_namespace }}"
    label_selectors:
      - type=engine
      - app={{ db2wh_instance_id }}
  register: db2wh_pod

- name: Configure facts
  set_fact:
    db2wh_pod_name: "{{ db2wh_pod.resources[0].metadata.name }}"

- name: "Debug information"
  debug:
    msg:
      - "Pod name ........... {{ db2wh_pod_name }}"

- name: "Creating backup folder in {{ db2wh_pod_name }}..."
  shell: | 
    oc exec -it -n {{ cpd_meta_namespace }} {{ db2wh_pod_name }} -- bash -c "sudo mkdir /tmp/db_backup {{ db2wh_backup_tmp_logs }} && sudo chown -R db2uadm /tmp/db_backup/ && sudo chown -R db2inst1 {{ db2wh_backup_tmp_logs }}"
  register: creating_backup_folder_output

- name: "Uploading DB2 backup files into DB2WH pod {{ db2wh_pod_name }}/tmp/db_backup/...(this can take several minutes)"
  shell: | 
    oc rsync --progress=true {{ db2wh_backup_folder }}/ -n {{ cpd_meta_namespace }} {{ db2wh_pod_name }}:/tmp/db_backup/ --no-perms
  register: copy_output
  failed_when: copy_output.rc != 0

- debug:
    msg: "{{ copy_output.stdout_lines }}"

- name: "Move backup files from /tmp/db_backup/ to db2inst1/db_backup/ folder..."
  shell: | 
    oc exec -it -n {{ cpd_meta_namespace }} {{ db2wh_pod_name }} -- bash -c "sudo mv /tmp/db_backup/ /mnt/blumeta0/home/db2inst1/ && sudo chown -R db2inst1 {{ db2wh_backup_dir }}/*"
  register: apply_output

# #========================================================================================================================================================================
# # ADD SOURCE MASTER KEY LABEL INTO TARGET KEYSTORE.P12: https://www.ibm.com/docs/en/db2/11.5?topic=edr-restoring-encrypted-backup-image-different-system-local-keystore
# #========================================================================================================================================================================

- name: "Check source keystore.p12 master key label..."
  shell: | 
    oc exec -it -n {{ cpd_meta_namespace }} {{ db2wh_pod_name }} -- su -lc "gsk8capicmd_64 -cert -list all -db '{{ db2wh_backup_dir }}/keystore.p12' -stashed" db2inst1
  register: check_master_label_output

- name: "Get source keystore.p12 master key label..."
  vars:
    regex: '\DB2(.*)'
  when: item is regex('\DB2(.*)') 
  set_fact:
    master_key_label: "{{ item | regex_search(regex) }}"
  with_items: "{{ check_master_label_output.stdout_lines | list }}"

- name: "Add extracted master key label from source into target keystore.p12 ..."
  shell: | 
    oc exec -it -n {{ cpd_meta_namespace }} {{ db2wh_pod_name }} -- su -lc "gsk8capicmd_64 -secretkey -add -db '/mnt/blumeta0/db2/keystore/keystore.p12' -stashed -label '{{ master_key_label }}' -format ascii -file {{ db2wh_backup_dir }}/master_key_label.kdb" db2inst1
  register: extract_master_label_output

# #========================================================================================================================================================================
# # RUN DB2 RESTORE & ROLLFORWARD COMMANDS
# #========================================================================================================================================================================

- name: Deactivate DB2 in preparation for restore
  shell: |
    oc exec -it -n {{ cpd_meta_namespace }} {{ db2wh_pod_name }} -- bash -c "cat << EOF > /tmp/prepRestoreDB.sh
    sudo wvcli system disable -m 'Disable HA before Db2 maintenance'
    db2 connect to BLUDB
    db2 list applications
    db2 force application all 
    db2 terminate 
    db2 deactivate database BLUDB
    db2stop force
    ipclean -a
    db2set -null DB2COMM
    db2start admin mode restricted access
    EOF"
    oc exec -it -n {{cpd_meta_namespace}} {{db2wh_pod_name}} -- bash -c "chmod 755 /tmp/prepRestoreDB.sh"
    oc exec -it -n {{cpd_meta_namespace}} {{db2wh_pod_name}} -- su -lc /tmp/prepRestoreDB.sh db2inst1
  register: prep_restore_output

- debug: 
    msg: "{{ prep_restore_output.stdout_lines }}"

- name: "Run DB2 RESTORE command (this can take several minutes...)"
  shell: | 
    oc exec -it -n {{ cpd_meta_namespace }} {{ db2wh_pod_name }} -- su -lc "db2 RESTORE DATABASE BLUDB FROM {{ db2wh_backup_dir }} TAKEN AT {{ db_backup_restore_timestamp }} INTO BLUDB LOGTARGET {{ db2wh_backup_tmp_logs }} REPLACE EXISTING WITHOUT PROMPTING" db2inst1
  register: restore_output
  failed_when: restore_output.rc != 0 and restore_output.rc != 2

- debug: 
    msg: "{{ restore_output.stdout_lines }}"

- name: "Run DB2 ROLLFORWARD command (this can take several minutes...)"
  shell: | 
    oc exec -it -n {{ cpd_meta_namespace }} {{ db2wh_pod_name }} -- su -lc "db2 'rollforward db BLUDB to end of backup and complete overflow log path ('/tmp/logs') noretrieve'" db2inst1
  register: rollforward_output
  failed_when: rollforward_output.rc != 0

- debug: 
    msg: "{{ rollforward_output.stdout_lines }}"

- name: "Activate DB2 as restore was successful"
  shell: |
    oc exec -it -n {{ cpd_meta_namespace }} {{ db2wh_pod_name }} -- bash -c "cat << EOF > /tmp/postRestoreDB.sh
    db2stop force
    ipclean -a
    db2set DB2COMM=TCPIP,SSL
    db2start
    db2 activate db bludb
    wvcli system enable -m 'Enable HA after Db2 maintenance'
    db2 connect to BLUDB
    EOF"
    oc exec -it -n {{cpd_meta_namespace}} {{db2wh_pod_name}} -- bash -c "chmod 755 /tmp/postRestoreDB.sh"
    oc exec -it -n {{cpd_meta_namespace}} {{db2wh_pod_name}} -- su -lc /tmp/postRestoreDB.sh db2inst1
  register: post_restore_output

- debug: 
    msg: "{{ post_restore_output.stdout_lines }}"
