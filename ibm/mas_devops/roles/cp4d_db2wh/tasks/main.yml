---
- name: "Fail if db2wh_instance_name has not been provided"
  when: db2wh_instance_name is not defined or db2wh_instance_name == ""
  fail:
    msg: "db2wh_instance_name property has not been set"
# 1. Provide debug information to the user
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "Namespace .................... {{ cpd_meta_namespace }}"
      - "Storage class ................ {{ cpd_storage_class }}"
      - "Db2 database instanceId ...... {{ db2wh_instance_id }}"
      - "Db2 database name ............ {{ db2wh_dbname }}"
      - "Db2 database username ........ {{ db2wh_username }}"
      - "Db2 version .................. {{ db2wh_version }}"
      - "MAS Instance ID .............. {{ mas_instance_id }}"
      - "MAS Config directory ......... {{ mas_config_dir }}"


## Required cluster preparation for db2wh as described in CPD 3.5 and 4.0 documentation:
## https://www.ibm.com/docs/en/cloud-paks/cp-data/3.5.0?topic=requirements-cloud-file-storage
## https://www.ibm.com/docs/en/cloud-paks/cp-data/4.0?topic=requirements-configuring-id-mapping-nfs-4#db2-cfg-id-mapping

- name: Configure No_root_squash when storage class is ibmc-file-gold-gid
  block:
    - name:
      community.kubernetes.k8s:
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: norootsquash
            namespace: kube-system

    - name: Give privileged access to norootsquash
      ansible.builtin.shell: |
        oc adm policy add-scc-to-user privileged system:serviceaccount:kube-system:norootsquash

    - name: Create Daemonset
      community.kubernetes.k8s:
        apply: yes
        definition: "{{ lookup('template', 'templates/daemonset.yaml') }}"
  when: cpd_storage_class == 'ibmc-file-gold-gid'

# 2. Create a Db2 instance
# -----------------------------------------------------------------------------
- name: "Create db2wh instance"
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/db2ucluster.yaml') }}"
  register: _db2_cluster_result

# Wait for the cluster to be ready
- name: "Wait for db2wh instance to be ready (5m delay)"
  community.kubernetes.k8s_info:
    api_version: db2u.databases.ibm.com/v1
    name: "{{ db2wh_instance_id | lower }}"
    namespace: "{{cpd_meta_namespace}}"
    kind: Db2uCluster
  register: db2_cluster_lookup
  until:
    - db2_cluster_lookup.resources | length == 1
    - db2_cluster_lookup.resources[0].status.state == "Ready"
  retries: 24 # Approximately 2 hours before we give up
  delay: 300 # 5 minutes


# 1. Determine which version of CP4D we are working with
# -----------------------------------------------------------------------------
# - if cpd_version is set explicitly then we use that
# - if cpd-meta-ops namespace exists then we assume it's 3.5
# - otherwise we assume CPD v4

- name: Check for the presence of the CPDv4 services namespace
  when: cpd_version is not defined or cpd_version == ''
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Namespace
    name: cpd-meta-ops
  register: cpd3_namespace_lookup

- name: Set cpd_version to cpd35 if we found the CP4D v3 namespace
  when:
    - cpd_version is not defined or cpd_version == ''
    - cpd3_namespace_lookup.resources is defined
    - cpd3_namespace_lookup.resources | length == 1
  set_fact:
    cpd_version: cpd35

- name: Default to cpd40 if we did not find the CP4D v3 namespace
  when: cpd_version is not defined or cpd_version == ''
  set_fact:
    cpd_version: cpd40


# 2. Set db2wh_version if none provided by the user
# -----------------------------------------------------------------------------
- name: Set db2wh_version if none provided by the user
  when: db2wh_version is not defined or db2wh_version == ''
  set_fact:
    db2wh_version: "{{ default_db2wh_version[cpd_version] }}"

- debug:
    msg:
      - "CPD Version ........................... {{ cpd_version }}"
      - "DB2WH Version ......................... {{ db2wh_version }}"


# 3. Load var files
# -----------------------------------------------------------------------------
- name: Load variables
  include_vars: "vars/{{ cpd_version }}.yml"

- name: Provision DB2 instance
  include_tasks: "tasks/{{ cpd_version }}/provision-instance.yml"
