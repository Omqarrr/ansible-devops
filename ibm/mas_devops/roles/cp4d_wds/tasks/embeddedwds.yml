---
# -----------------------------------------------------------------------------
- name: "Fail if mas_instance_id is not provided"
  when: mas_instance_id is not defined or mas_instance_id == ""
  fail:
    msg: "mas_instance_id property is required"

- name: "Fail if mas_config_dir is not provided"
  when: mas_config_dir is not defined or mas_config_dir == ""
  fail:
    msg: "mas_config_dir property is required"

# 1. Provide debug information to the user
# -----------------------------------------------------------------------------
- name: "Debug information"
  debug:
    msg:
      - "Storage class ................ {{ wdsstorageclass }}"

- name: "cp4d/wds: Check if cpd instance is there "
  community.kubernetes.k8s_info:
    api_version: cpd.ibm.com/v1
    kind: Ibmcpd
  register: cp4dalllist

- name: "cp4d/wds: cp4d cluster status"
  when: cp4dalllist.resources| length != 0
  set_fact:
    cpdavailable: '{% if cp4dalllist.resources[0].status.controlPlaneStatus == "Completed" %}True{% else %}False{% endif %}'
    cpdnamespace: "{{ cp4dalllist.resources[0].metadata.namespace }}"
    cpdstorageclass: "{{ cp4dalllist.resources[0].spec.storageClass is defined | ternary(cp4dalllist.resources[0].spec.storageClass,wdsstorageclass) }}"

- name: "cp4d/wds: Check if cpd instance is there "
  when: cpdavailable is defined and cpdavailable
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Secret
    name: "admin-user-details"
    namespace: "{{ cpdnamespace }}"
  register: cpdadmincred

- name: "cp4d/wds: Query CP4D Operator namespace"
  when: 
    - cpdavailable is defined and cpdavailable
    - cpdadmincred.resources| length != 0
  set_fact:
    wds_admin_username: "admin"
    wds_admin_password: "{{ cpdadmincred.resources[0]['data']['initial_admin_password'] | b64decode }}"

- name: "cp4d/wds: set WDS SC based on existing storage class"
  block:
    - name: list all SC
      community.kubernetes.k8s_info:
        kind: StorageClass
      register: sc
    - name: find if there's ibmc-block-gold storage class
      set_fact:
        findibmcsc: true
      with_items: "{{ sc.resources }}"
      when: item.metadata.name is defined and item.metadata.name == 'ibmc-block-gold'

- name: "cp4d/wds: Check if cpd platform and fundermental service operator is there "
  when: cpdavailable is defined and cpdavailable
  community.kubernetes.k8s_info:
    api_version: operator.ibm.com/v1alpha1
    kind: OperandRequest
    name: "zen-service"
    namespace: "{{ cpdnamespace }}"
  register: cp4doperandrequest

# 2. Query CP4D Operator namespace
# -----------------------------------------------------------------------------
- name: "cp4d/wds: Query CP4D Operator namespace"
  when: 
    - cpdavailable is defined and cpdavailable
    - cp4doperandrequest.resources| length != 0
  set_fact:
    cpdopsnamespace: "{{ cp4doperandrequest.resources[0].spec.requests[0].registryNamespace }}"

# 2. Install edb Operator in the cpd instance namespace
# -----------------------------------------------------------------------------
- name: "cp4d/wds: Find if subscription for edb exist"
  when: cpdavailable is defined and cpdavailable
  block:
    - name: Get the sub info from CP4D instance namespace
      community.kubernetes.k8s_info:
        api_version: operators.coreos.com/v1alpha1
        kind: Subscription
        namespace: "{{ cpdopsnamespace }}"
      register: cp4d_subs
    - name: "cp4d/wds: Find sub info for CP4D edb operator"
      set_fact:
        edbavailable:  true
      with_items: "{{ cp4d_subs.resources }}"
      when: item.spec.name == 'cloud-native-postgresql' or item.spec.name == 'ibm-cpd-edb'
    - name: Print EDB namespace info if it's found
      when: edbavailable is defined and edbavailable
      debug:
        msg: 
          - "EDB Available ...... {{ edbavailable }}"
          - "EDB Namespace...... {{ cpdopsnamespace }}"
    - name: "cp4d/wds : Create CP4D EDB subscription"
      when: not ( edbavailable is defined and edbavailable )
      community.kubernetes.k8s:
        apply: yes
        definition: "{{ lookup('template', 'templates/edbsub.yml') }}"
        namespace: "{{ cpdnamespace }}"

# 3. Create CP4D WDS subscription
# -----------------------------------------------------------------------------
- name: "cp4d/wds : Create CP4D WDS subscription"
  when: 
    - cpdavailable is defined and cpdavailable
    - edbavailable is defined and edbavailable
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/subscription.yml') }}"
    namespace: "{{ cpdopsnamespace }}"

# 4. Create CP4D WDS instance
# -----------------------------------------------------------------------------
- name: "cp4d/wds : Create CP4D WDS instance"
  when: cpdavailable is defined and cpdavailable
  community.kubernetes.k8s:
    apply: yes
    definition: "{{ lookup('template', 'templates/cr.yml') }}"

# Wait for the cluster to be ready
- name: "cp4d/wds : Wait for WDS instance to be ready (5m delay)"
  when: cpdavailable is defined and cpdavailable
  community.kubernetes.k8s_info:
    api_version: discovery.watson.ibm.com/v1
    name: wd
    namespace: "{{ cpdnamespace }}"
    kind: WatsonDiscovery
  register: wds_cluster_lookup
  until:
    - wds_cluster_lookup.resources | length == 1
    - wds_cluster_lookup.resources[0].status.watsonDiscoveryStatus == "Completed"
  retries: 24 # Approximately 2 hours before we give up
  delay: 300 # 5 minutes


- name: "cp4d/wds: Find cp4d route info"
  when: cpdavailable is defined and cpdavailable
  block:
    - name: Get the CP4D Route info from OpenShift
      community.kubernetes.k8s_info:
        api_version: route.openshift.io/v1
        kind: Route
        namespace: "{{ cpdnamespace }}"
      register: cp4d_routes
    - name: "cp4d/wds: Find route info for CP4D "
      set_fact:
        cp4dhost:  "{{ item.spec.host }}"
      with_items: "{{ cp4d_routes.resources }}"
      when: item.spec.to.name is defined and item.spec.to.name =='ibm-nginx-svc'
    - name: Get the CP4D host from Route info and set as cp4d_host
      set_fact:
        cp4d_host_url: "https://{{ cp4dhost }}"

- name: Authorize the CP4D (get Bearer token)
  when: cpdavailable is defined and cpdavailable
  uri:
    url: "{{ cp4d_host_url }}/icp4d-api/v1/authorize"
    validate_certs: no
    method: POST
    headers:
      cache-control: "no-cache"
    body_format: "json"
    body: "{\"username\":\"{{ wds_admin_username }}\",\"password\":\"{{ wds_admin_password }}\"}"
    status_code: 200
    timeout: 30
  register: cp4d_authorization_info

- name: Get the CP4D Bearer token
  when: cpdavailable is defined and cpdavailable
  set_fact:
    wds_bearer_token: "{{ cp4d_authorization_info.json.token }}"

# 4. Query a CP4D WDS instance
# -----------------------------------------------------------------------------
- name: Query the WDS instance in CP4D
  when: wds_bearer_token is defined
  uri:
    url: "{{ cp4d_host_url }}/zen-data/v3/service_instances?fetch_all_instances=false&limit=9223372036854775807&offset=0"
    validate_certs: no
    method: GET
    headers:
      Authorization: "Bearer {{ wds_bearer_token }}"
      cache-control: "no-cache"
    status_code: 200,412
    timeout: 30
  register: query_instance_output

- name: find if there's WDS instance 
  set_fact:
    wds_number: "{{ item.id | int}}"  
    findwdsinst: true
  with_items: "{{ query_instance_output.json.service_instances }}"
  when: 
    - query_instance_output.status is defined and query_instance_output.status|int == 200
    - item.addon_type == "discovery"

# 4. Create a CP4D WDS  instance
# -----------------------------------------------------------------------------
- name: Create the WDS instance in CP4D when WDS instance not exist
  when: not ( findwdsinst is defined and findwdsinst ) 
  block:
    - name: find if there's WDS instance 
      uri:
        url: "{{ cp4d_host_url }}/watson/common/discovery/api/ibmcloud/resource-controller/resource_instances"
        validate_certs: no
        method: POST
        headers:
          Authorization: "Bearer {{ wds_bearer_token }}"
          cache-control: "no-cache"
        body_format: "json"
        body: "{{ lookup('template','templates/wds.json.j2') }}"
        status_code: 200,412
        timeout: 30
      register: create_wds_output
    - debug: 
        msg: "discovery instance ID.....{{ create_wds_output.json.id }}"
      when: create_wds_output.status|int == 200
    - name: Get the CP4D instanceurl
      when: create_wds_output.status|int == 200
      set_fact:
        wds_number: "{{ create_wds_output.json.id | replace('-','')|int }}"

# Write out the WDS config/secret to the local filesystem
# -----------------------------------------------------------------------------
- name: Create the WDS instance cm and secret yml file when WDS instance exist
  block:
    - name: Get the CP4D instanceurl
      set_fact:
        wds_url: "{{ cp4d_host_url}}/discovery/{{ cpdnamespace }}-wd/instances/{{ wds_number }}/api"
    - name: Print the WDS related info
      debug:
        msg:
          - "WDS url      .... {{ wds_url }}"
          - "WDS Admin    .... {{ wds_admin_username }}"
          - "WDS Passw0rd .... {{ wds_admin_password }}"
  rescue:
    - name: Fail as we didn't get the WDS instance here or CP4D is not installed.
      fail:
        msg: "We Couldn't get the WDS instance here or CP4D is not installed"

