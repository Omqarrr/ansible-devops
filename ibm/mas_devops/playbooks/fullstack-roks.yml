---
- hosts: localhost
  any_errors_fatal: true

# 1. Deploy & configure the cluster
# -----------------------------------------------------------------------------
- name: Deploy ROKS cluster in IBM Cloud
  import_playbook: ocp/provision-roks.yml

- name: Login & configure OCP cluster
  import_playbook: ocp/configure-ocp.yml
  vars:
    cluster_type: roks
    ibmcloud_apikey: "{{ lookup('env', 'IBMCLOUD_APIKEY') }}"


# 2. Install MongoDb
# -----------------------------------------------------------------------------
- name: Install MongoDb (Community Edition)
  import_playbook: dependencies/install-mongodb-ce.yml
  vars:
    mongodb_storage_class: ibmc-block-gold
    mas_config_dir: "{{ lookup('env', 'MAS_CONFIG_DIR') }}"


# 3. Install AMQ Streams
# -----------------------------------------------------------------------------
- name: Install AMQ Streams (Apache Kafka)
  import_playbook: dependencies/install-amqstreams.yml
  vars:
    kafka_namespace: amq-streams
    kafka_cluster_name: maskafka
    kafka_cluster_size: "{{ lookup('env', 'KAFKA_CLUSTER_SIZE') | default('small', true) }}"
    kafka_storage_class: ibmc-block-gold
    kafka_user_name: masuser
    mas_config_dir: "{{ lookup('env', 'MAS_CONFIG_DIR') }}"


# 4. Install all CP4D services - this will take a long time!
# -----------------------------------------------------------------------------
- name: Install CP4D services
  import_playbook: cp4d/install-services-fullstack.yml
  vars:
    cpd_storage_class: ibmc-file-gold-gid
    mas_config_dir: "{{ lookup('env', 'MAS_CONFIG_DIR') }}"


# 5. Create DB2 Warehouse instance in CP4D
# -----------------------------------------------------------------------------
- name: Install CP4D services & configure Db2
  import_playbook: cp4d/create-db2-instance.yml
  vars:
    cp4d_db2wh_instance_name: db2w-shared
    cp4d_meta_storage_class: ibmc-file-silver-gid
    cp4d_user_storage_class: ibmc-file-gold-gid
    cp4d_backup_storage_class: ibmc-file-gold-gid
    mas_config_scope: system


# 6. Install SLS
# -----------------------------------------------------------------------------
- name: Install SLS
  import_playbook: dependencies/install-sls.yml
  vars:
    sls_storage_class: ibmc-file-gold-gid
    mas_config_dir: "{{ lookup('env', 'MAS_CONFIG_DIR') }}"

    # Use the generated mongodb configuration
    mongodb_namespace: "{{ lookup('env', 'MONGODB_NAMESPACE') | default('mongoce', True) }}"
    mongodb_cfg_file: "{{ mas_config_dir }}/mongo-{{ mongodb_namespace }}.yml"


# 7. Install BAS
# -----------------------------------------------------------------------------
- name: Install BAS
  import_playbook: dependencies/install-bas.yml
  vars:
    bas_persistent_storage: "ibmc-file-bronze-gid"
    bas_meta_storage_class: "ibmc-block-bronze"


# 8. Install & configure MAS
# Temporary hack for Manage, because the operator is missing critical
# database configuration that requires manual intervention to set up.
- name: Db2 configuration hack for Manage
  import_playbook: mas/hack-manage-db2.yml
  vars:
    db2wh_instance_id: db2w-shared
    load_from_config: "true"


# 9. Install & configure MAS
# -----------------------------------------------------------------------------
- name: Install & configure MAS
  import_playbook: mas/install-suite.yml
  vars:
    mas_config_dir: "{{ lookup('env', 'MAS_CONFIG_DIR') }}"


# 10. Install & Configure Manage application
# -----------------------------------------------------------------------------
- name: Install Manage
  import_playbook: mas/install-app.yml
  vars:
    mas_app_id: manage

# Note that this sample playbook is always assuming a workspace ID of masdev,
# this can easily be modified when creating your own playbooks.
- name: Configure Manage
  import_playbook: mas/configure-app-manage.yml
